name: K8s Tests Pipeline

on:
  push:
    branches:
      - main

jobs:
  run-test:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Kind and kubectl
        run: |
          set -euxo pipefail
          if ! command -v kind &> /dev/null; then
            OS_TYPE=$(uname -s | tr '[:upper:]' '[:lower:]')
            ARCH_TYPE=$(uname -m)
            if [[ "${ARCH_TYPE}" == "aarch64" ]]; then ARCH_TYPE="arm64"; elif [[ "${ARCH_TYPE}" == "x86_64" ]]; then ARCH_TYPE="amd64"; fi
            KIND_VERSION="v0.20.0"
            curl -Lo ./kind "https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-${OS_TYPE}-${ARCH_TYPE}"
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind
          fi
          if ! command -v kubectl &> /dev/null; then
            OS_TYPE=$(uname -s | tr '[:upper:]' '[:lower:]')
            ARCH_TYPE=$(uname -m)
            if [[ "${ARCH_TYPE}" == "aarch64" ]]; then ARCH_TYPE="arm64"; elif [[ "${ARCH_TYPE}" == "x86_64" ]]; then ARCH_TYPE="amd64"; fi
            KUBECTL_URL="https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/${OS_TYPE}/${ARCH_TYPE}/kubectl"
            curl -LO "${KUBECTL_URL}"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/kubectl
          fi

      - name: Setup Kind Cluster
        run: |
          set -euxo pipefail
          kind delete cluster --name kind || true
          cat <<EOF > kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            image: kindest/node:v1.27.3
            extraPortMappings:
            - containerPort: 30080
              hostPort: 30080
            - containerPort: 30081
              hostPort: 30081
            - containerPort: 30082
              hostPort: 30082
          EOF
          kind create cluster --name kind --config kind-config.yaml --wait 300s
          kubectl config use-context kind-kind

      - name: Setup K8s Environment (Load Images & Deploy Apps)
        run: |
          set -euxo pipefail
          make
          kind load docker-image datalake/streaming_ingestion:latest
          kind load docker-image datalake/identity:latest
          kind load docker-image datalake/api_gateway:latest
          kind load docker-image datalake/ingestion:latest
          kind load docker-image datalake/worker:latest
          kind load docker-image datalake/master:latest
          kind load docker-image datalake/integration_tests:latest

          NAMESPACE_DATE=$(date +%Y%m%d)
          DYNAMIC_NAMESPACE="test-env-${NAMESPACE_DATE}-${RANDOM}"
          kubectl create ns "${DYNAMIC_NAMESPACE}"
          echo "DYNAMIC_NAMESPACE=${DYNAMIC_NAMESPACE}" >> $GITHUB_ENV

          find ./k8s/test-env -type f \( -name "*.yaml" -o -name "*.yml" \) \
            -exec sed -i "s/__DYNAMIC_NAMESPACE__/${DYNAMIC_NAMESPACE}/g" {} +

          kubectl apply -f ./k8s/test-env/

      - name: Run Go Integration Tests in Pod
        run: |
          set -euxo pipefail

          sleep 60
          kubectl get pods -n "$DYNAMIC_NAMESPACE"


          POD=$(kubectl get pod -n "$DYNAMIC_NAMESPACE" -l app=integration-tests -o jsonpath='{.items[0].metadata.name}' || echo "")

          if [ -z "$POD" ]; then
            echo "No integration-tests pod found!"
            kubectl get pods -n "$DYNAMIC_NAMESPACE"
            exit 1
          fi

          echo "Pod logs:"
          kubectl logs "$POD" -n "$DYNAMIC_NAMESPACE" || echo "No logs available"

        env:
          DYNAMIC_NAMESPACE: ${{ env.DYNAMIC_NAMESPACE }}

      - name: Teardown Kind Cluster
        if: always()
        run: |
          kind delete cluster --name kind || true
