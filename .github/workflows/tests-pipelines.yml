name: K8s Tests Pipeline

on:
  push:
    branches:
      - main

jobs:
  run-test:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Kind Cluster
        uses: engineerd/setup-kind@v0.5.0
        with:
          wait: 300s
          version: v0.20.0
          image: kindest/node:v1.27.3

      - name: Verify Kind Installation
        run: |
          echo "[INFO] Verifying Kind cluster..."
          kubectl cluster-info --context kind-kind
          kubectl get nodes
          kubectl config current-context

      - name: Setup K8s Environment (Load Images & Deploy Apps)
        run: |
          set -euxo pipefail

          echo "[INFO] Building Docker images locally with make..."
          make

          # Load images into Kind cluster
          echo "[INFO] Loading Docker images into Kind cluster..."
          # Get all images from your make build and load them
          # Adjust these image names based on your actual images
          kind load docker-image identity-service:latest
          kind load docker-image api-gateway:latest
          # Add other images as needed

          NAMESPACE_DATE=$(date +%Y%m%d)
          DYNAMIC_NAMESPACE="test-env-${NAMESPACE_DATE}-${RANDOM}"
          echo "Creating namespace: ${DYNAMIC_NAMESPACE}"
          kubectl create ns "${DYNAMIC_NAMESPACE}"
          echo "DYNAMIC_NAMESPACE=${DYNAMIC_NAMESPACE}" >> $GITHUB_ENV

          echo "[INFO] Replacing __DYNAMIC_NAMESPACE__ placeholders in manifests..."
          find ./k8s/test-env/ -type f \( -name "*.yaml" -o -name "*.yml" \) -print0 | while IFS= read -r -d $'\0' file; do
            sed -i.bak "s|__DYNAMIC_NAMESPACE__|${DYNAMIC_NAMESPACE}|g" "$file"
            rm "${file}.bak"
          done

          echo "[INFO] Applying Kubernetes manifests..."
          kubectl apply -f ./k8s/test-env/

          echo "[INFO] Waiting for deployments to become available..."
          kubectl wait --for=condition=available --timeout=300s deployment --all -n "${DYNAMIC_NAMESPACE}"

          echo "[INFO] Waiting for StatefulSets to be ready (if any)..."
          kubectl rollout status statefulset/kafka -n "${DYNAMIC_NAMESPACE}" --timeout=300s || echo "[WARN] No kafka statefulset found or not needed"

          echo "[INFO] Waiting for all pods to be ready..."
          kubectl wait --for=condition=ready --timeout=300s pod --all -n "${DYNAMIC_NAMESPACE}"

          echo "[INFO] Checking deployment rollout status..."
          kubectl rollout status deployment/identity-service -n "${DYNAMIC_NAMESPACE}" --timeout=300s
          kubectl rollout status deployment/api-gateway -n "${DYNAMIC_NAMESPACE}" --timeout=300s

          echo "[INFO] Verifying services are accessible..."
          kubectl get svc -n "${DYNAMIC_NAMESPACE}"
          kubectl get endpoints -n "${DYNAMIC_NAMESPACE}"

      - name: Setup Port Forwarding for Services
        id: port_forward
        run: |
          set -euxo pipefail

          echo "[INFO] Setting up port forwarding for services..."

          # Function to set up port forwarding
          setup_port_forward() {
            local service=$1
            local port=$2
            local local_port=$3

            echo "[INFO] Setting up port forward for $service..."

            # Wait for service to be ready
            kubectl wait --for=condition=ready --timeout=60s pod -l app="$service" -n "${DYNAMIC_NAMESPACE}"

            # Start port forwarding in background
            kubectl port-forward svc/"$service" "${local_port}:${port}" -n "${DYNAMIC_NAMESPACE}" &
            local pf_pid=$!

            # Wait for port forward to be ready
            sleep 5

            # Test connection
            for i in {1..30}; do
              if curl -s "http://localhost:${local_port}/health" > /dev/null 2>&1 || \
                 curl -s "http://localhost:${local_port}" > /dev/null 2>&1; then
                echo "[INFO] $service is accessible at http://localhost:${local_port}"
                echo "http://localhost:${local_port}"
                return
              fi
              echo "[WAIT] Waiting for $service to be accessible... (${i}/30)"
              sleep 2
            done

            echo "[ERROR] $service did not become accessible in time"
            kill $pf_pid 2>/dev/null || true
            exit 1
          }

          # Set up port forwarding for services
          # Adjust ports based on your service configurations
          IDENTITY_URL=$(setup_port_forward identity-service 8080 8081)
          echo "identity_service_url=${IDENTITY_URL}" >> $GITHUB_ENV

          GATEWAY_URL=$(setup_port_forward api-gateway 8080 8082)
          echo "api_gateway_url=${GATEWAY_URL}" >> $GITHUB_ENV

          echo "[INFO] All services are now accessible via port forwarding"

        env:
          DYNAMIC_NAMESPACE: ${{ env.DYNAMIC_NAMESPACE }}

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Run Go Integration Tests
        id: go-tests
        run: |
          set -euxo pipefail
          echo "[INFO] Running Go integration tests..."
          cd test/integration
          export IDENTITY_SERVICE_URL=${{ env.identity_service_url }}
          export API_GATEWAY_URL=${{ env.api_gateway_url }}
          go test -v ./...
        env:
          DYNAMIC_NAMESPACE: ${{ env.DYNAMIC_NAMESPACE }}

      - name: Dump Logs on Failure
        if: failure()
        run: |
          echo "--- Tests failed. Dumping Kubernetes state for debugging. ---"
          echo "Current kubectl context:"
          kubectl config current-context || echo "No context set"
          kubectl cluster-info || echo "Cluster info failed"

          echo "Kind cluster status:"
          kind get clusters || echo "Kind clusters failed"

          echo "Pods in namespace:"
          kubectl get pods -n "${DYNAMIC_NAMESPACE}" -o wide || true

          echo "Pod descriptions:"
          kubectl describe pods -n "${DYNAMIC_NAMESPACE}" || true

          echo "Pod logs:"
          kubectl get pods -n "${DYNAMIC_NAMESPACE}" -o name | while read pod; do
            echo "=== Logs for $pod ==="
            kubectl logs "$pod" -n "${DYNAMIC_NAMESPACE}" --tail=50 || true
          done

          echo "Services:"
          kubectl get svc -n "${DYNAMIC_NAMESPACE}" || true

          echo "Endpoints:"
          kubectl get endpoints -n "${DYNAMIC_NAMESPACE}" || true

          echo "Deployments:"
          kubectl get deployment -n "${DYNAMIC_NAMESPACE}" || true

          echo "StatefulSets:"
          kubectl get statefulset -n "${DYNAMIC_NAMESPACE}" || true

          echo "Events:"
          kubectl get events -n "${DYNAMIC_NAMESPACE}" --sort-by='.lastTimestamp' || true
        env:
          DYNAMIC_NAMESPACE: ${{ env.DYNAMIC_NAMESPACE }}

      - name: Cleanup Port Forwarding
        if: always()
        run: |
          echo "[INFO] Cleaning up port forwarding processes..."
          # Kill all kubectl port-forward processes
          pkill -f "kubectl port-forward" || true

      - name: Teardown Kind Cluster
        if: always()
        run: |
          echo "[INFO] Cleaning up Kind cluster..."
          kind delete cluster || true
