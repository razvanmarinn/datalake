name: K8s Tests Pipeline

on:
  push:
    branches:
      - main

jobs:
  run-test:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Minikube and kubectl
        run: |
          set -euxo pipefail
          OS_TYPE=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH_TYPE=$(uname -m)
          if [[ "${ARCH_TYPE}" == "aarch64" ]]; then
            ARCH_TYPE="arm64"
          fi

          if command -v minikube &> /dev/null && command -v kubectl &> /dev/null; then
              echo "Minikube and kubectl are already installed."
              minikube version
              kubectl version --client
              exit 0
          fi

          MINIKUBE_BINARY="minikube-${OS_TYPE}-${ARCH_TYPE}"
          echo "Detected OS: ${OS_TYPE}, Architecture: ${ARCH_TYPE}"
          echo "Downloading Minikube..."
          curl -LO "https://storage.googleapis.com/minikube/releases/latest/${MINIKUBE_BINARY}"
          sudo mv "${MINIKUBE_BINARY}" /usr/local/bin/minikube
          sudo chmod +x /usr/local/bin/minikube

          echo "Downloading kubectl..."
          KUBECTL_DOWNLOAD_URL="https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/${OS_TYPE}/${ARCH_TYPE}/kubectl"
          curl -LO "${KUBECTL_DOWNLOAD_URL}"
          sudo mv "kubectl" /usr/local/bin/kubectl
          sudo chmod +x /usr/local/bin/kubectl

          echo "Verifying installations..."
          minikube version
          kubectl version --client

      - name: Setup K8s Environment (Minikube & Deploy Apps)
        run: |
          #!/bin/bash
          set -euxo pipefail
          minikube delete || true
          minikube start --driver=docker
          eval $(minikube docker-env)

          echo "Building application images..."
          make

          NAMESPACE_DATE=$(date +%Y%m%d)
          DYNAMIC_NAMESPACE="test-env-${NAMESPACE_DATE}-${RANDOM}"
          echo "Creating namespace: ${DYNAMIC_NAMESPACE}"
          kubectl create ns "${DYNAMIC_NAMESPACE}"
          echo "DYNAMIC_NAMESPACE=${DYNAMIC_NAMESPACE}" >> $GITHUB_ENV

          echo "Substituting namespace in manifests..."
          find ./k8s/test-env/ -type f \( -name "*.yaml" -o -name "*.yml" \) -print0 | while IFS= read -r -d $'\0' file; do
            sed -i.bak "s|__DYNAMIC_NAMESPACE__|${DYNAMIC_NAMESPACE}|g" "$file"
            rm "${file}.bak"
          done

          echo "Applying application manifests to namespace: ${DYNAMIC_NAMESPACE}..."
          kubectl apply -f ./k8s/test-env/

          echo "Pausing for 5 seconds to allow API server to process new objects..."
          sleep 5

          echo "Waiting for all deployments to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment --all -n "${DYNAMIC_NAMESPACE}"

          echo "Waiting for all statefulsets to be ready..."
          kubectl rollout status statefulset/kafka -n "${DYNAMIC_NAMESPACE}" --timeout=300s

          echo "Setup complete! All pods are ready."
        env:
          KUBECONFIG: ~/.kube/config

      - name: Expose Services and Get URLs
        id: expose_services
        run: |
          #!/bin/bash
          set -euxo pipefail

          # Get the URL for the identity-service
          IDENTITY_URL=$(minikube service identity-service -n "${DYNAMIC_NAMESPACE}" --url)
          echo "identity_service_url=${IDENTITY_URL}" >> $GITHUB_ENV

          # Get the URL for the api-gateway
          GATEWAY_URL=$(minikube service api-gateway -n "${DYNAMIC_NAMESPACE}" --url)
          echo "api_gateway_url=${GATEWAY_URL}" >> $GITHUB_ENV

          echo "Identity Service URL: ${IDENTITY_URL}"
          echo "API Gateway URL: ${GATEWAY_URL}"
        env:
          DYNAMIC_NAMESPACE: ${{ env.DYNAMIC_NAMESPACE }}
          KUBECONFIG: ~/.kube/config

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Run Go Integration Tests
        id: go-tests
        run: |
          #!/bin/bash
          set -euxo pipefail
          echo "Running Go integration tests..."
          cd test/integration
          # Pass the service URLs as environment variables to your tests
          export IDENTITY_SERVICE_URL=${{ env.identity_service_url }}
          export API_GATEWAY_URL=${{ env.api_gateway_url }}
          go test -v ./...
        env:
          DYNAMIC_NAMESPACE: ${{ env.DYNAMIC_NAMESPACE }}
          KUBECONFIG: ~/.kube/config

      - name: Dump Logs on Failure
        if: failure()
        run: |
          echo "--- Tests failed. Dumping debug information. ---"
          echo "--- Kubernetes Pods Status ---"
          kubectl get pods -n "${DYNAMIC_NAMESPACE}" -o wide
          echo "--- Kubernetes Services Status ---"
          kubectl get svc -n "${DYNAMIC_NAMESPACE}"
          echo "--- Kubernetes Endpoints Status ---"
          kubectl get endpoints -n "${DYNAMIC_NAMESPACE}"
          echo "--- Kubernetes Deployment Status ---"
          kubectl get deployment -n "${DYNAMIC_NAMESPACE}"
          echo "--- Kubernetes StatefulSet Status ---"
          kubectl get statefulset -n "${DYNAMIC_NAMESPACE}"
        env:
          DYNAMIC_NAMESPACE: ${{ env.DYNAMIC_NAMESPACE }}
          KUBECONFIG: ~/.kube/config

      - name: Teardown Minikube Cluster
        if: always()
        run: |
          minikube delete
