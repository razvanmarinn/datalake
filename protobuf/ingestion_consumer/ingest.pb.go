// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: ingest.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MasterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerIp      string                 `protobuf:"bytes,1,opt,name=worker_ip,json=workerIp,proto3" json:"worker_ip,omitempty"`
	WorkerPort    int32                  `protobuf:"varint,2,opt,name=worker_port,json=workerPort,proto3" json:"worker_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterResponse) Reset() {
	*x = MasterResponse{}
	mi := &file_ingest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterResponse) ProtoMessage() {}

func (x *MasterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterResponse.ProtoReflect.Descriptor instead.
func (*MasterResponse) Descriptor() ([]byte, []int) {
	return file_ingest_proto_rawDescGZIP(), []int{0}
}

func (x *MasterResponse) GetWorkerIp() string {
	if x != nil {
		return x.WorkerIp
	}
	return ""
}

func (x *MasterResponse) GetWorkerPort() int32 {
	if x != nil {
		return x.WorkerPort
	}
	return 0
}

type ClientFileRequestToMaster struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	Hash          int32                  `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
	FileSize      int64                  `protobuf:"varint,3,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	BatchInfo     *Batches               `protobuf:"bytes,4,opt,name=batchInfo,proto3" json:"batchInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientFileRequestToMaster) Reset() {
	*x = ClientFileRequestToMaster{}
	mi := &file_ingest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientFileRequestToMaster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientFileRequestToMaster) ProtoMessage() {}

func (x *ClientFileRequestToMaster) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientFileRequestToMaster.ProtoReflect.Descriptor instead.
func (*ClientFileRequestToMaster) Descriptor() ([]byte, []int) {
	return file_ingest_proto_rawDescGZIP(), []int{1}
}

func (x *ClientFileRequestToMaster) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ClientFileRequestToMaster) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ClientFileRequestToMaster) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ClientFileRequestToMaster) GetBatchInfo() *Batches {
	if x != nil {
		return x.BatchInfo
	}
	return nil
}

type ClientBatchRequestToMaster struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	BatchSize     int32                  `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientBatchRequestToMaster) Reset() {
	*x = ClientBatchRequestToMaster{}
	mi := &file_ingest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientBatchRequestToMaster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientBatchRequestToMaster) ProtoMessage() {}

func (x *ClientBatchRequestToMaster) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientBatchRequestToMaster.ProtoReflect.Descriptor instead.
func (*ClientBatchRequestToMaster) Descriptor() ([]byte, []int) {
	return file_ingest_proto_rawDescGZIP(), []int{2}
}

func (x *ClientBatchRequestToMaster) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *ClientBatchRequestToMaster) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type WorkerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerResponse) Reset() {
	*x = WorkerResponse{}
	mi := &file_ingest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerResponse) ProtoMessage() {}

func (x *WorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerResponse.ProtoReflect.Descriptor instead.
func (*WorkerResponse) Descriptor() ([]byte, []int) {
	return file_ingest_proto_rawDescGZIP(), []int{3}
}

func (x *WorkerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AvroBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	AvroData      []byte                 `protobuf:"bytes,2,opt,name=avro_data,json=avroData,proto3" json:"avro_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AvroBatchRequest) Reset() {
	*x = AvroBatchRequest{}
	mi := &file_ingest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvroBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvroBatchRequest) ProtoMessage() {}

func (x *AvroBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvroBatchRequest.ProtoReflect.Descriptor instead.
func (*AvroBatchRequest) Descriptor() ([]byte, []int) {
	return file_ingest_proto_rawDescGZIP(), []int{4}
}

func (x *AvroBatchRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *AvroBatchRequest) GetAvroData() []byte {
	if x != nil {
		return x.AvroData
	}
	return nil
}

type Batch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Batch) Reset() {
	*x = Batch{}
	mi := &file_ingest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_ingest_proto_rawDescGZIP(), []int{5}
}

func (x *Batch) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Batch) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Batches struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Batches       []*Batch               `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Batches) Reset() {
	*x = Batches{}
	mi := &file_ingest_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Batches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batches) ProtoMessage() {}

func (x *Batches) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batches.ProtoReflect.Descriptor instead.
func (*Batches) Descriptor() ([]byte, []int) {
	return file_ingest_proto_rawDescGZIP(), []int{6}
}

func (x *Batches) GetBatches() []*Batch {
	if x != nil {
		return x.Batches
	}
	return nil
}

type MasterFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterFileResponse) Reset() {
	*x = MasterFileResponse{}
	mi := &file_ingest_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterFileResponse) ProtoMessage() {}

func (x *MasterFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ingest_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterFileResponse.ProtoReflect.Descriptor instead.
func (*MasterFileResponse) Descriptor() ([]byte, []int) {
	return file_ingest_proto_rawDescGZIP(), []int{7}
}

func (x *MasterFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_ingest_proto protoreflect.FileDescriptor

var file_ingest_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x22, 0x4e, 0x0a, 0x0e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x09,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x1a, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x2a, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a, 0x10, 0x41,
	0x76, 0x72, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76,
	0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61,
	0x76, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x3e, 0x0a, 0x07, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xe1, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x69, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x6b, 0x0a, 0x0d,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a,
	0x0e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x76, 0x72, 0x6f, 0x12,
	0x24, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x2e, 0x41, 0x76, 0x72, 0x6f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x7a, 0x76, 0x61, 0x6e, 0x6d, 0x61,
	0x72, 0x69, 0x6e, 0x6e, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_ingest_proto_rawDescOnce sync.Once
	file_ingest_proto_rawDescData []byte
)

func file_ingest_proto_rawDescGZIP() []byte {
	file_ingest_proto_rawDescOnce.Do(func() {
		file_ingest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ingest_proto_rawDesc), len(file_ingest_proto_rawDesc)))
	})
	return file_ingest_proto_rawDescData
}

var file_ingest_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_ingest_proto_goTypes = []any{
	(*MasterResponse)(nil),             // 0: ingestion_consumer.MasterResponse
	(*ClientFileRequestToMaster)(nil),  // 1: ingestion_consumer.ClientFileRequestToMaster
	(*ClientBatchRequestToMaster)(nil), // 2: ingestion_consumer.ClientBatchRequestToMaster
	(*WorkerResponse)(nil),             // 3: ingestion_consumer.WorkerResponse
	(*AvroBatchRequest)(nil),           // 4: ingestion_consumer.AvroBatchRequest
	(*Batch)(nil),                      // 5: ingestion_consumer.Batch
	(*Batches)(nil),                    // 6: ingestion_consumer.Batches
	(*MasterFileResponse)(nil),         // 7: ingestion_consumer.MasterFileResponse
}
var file_ingest_proto_depIdxs = []int32{
	6, // 0: ingestion_consumer.ClientFileRequestToMaster.batchInfo:type_name -> ingestion_consumer.Batches
	5, // 1: ingestion_consumer.Batches.batches:type_name -> ingestion_consumer.Batch
	1, // 2: ingestion_consumer.MasterService.RegisterFile:input_type -> ingestion_consumer.ClientFileRequestToMaster
	2, // 3: ingestion_consumer.MasterService.GetBatchDestination:input_type -> ingestion_consumer.ClientBatchRequestToMaster
	4, // 4: ingestion_consumer.WorkerService.StoreBatchAvro:input_type -> ingestion_consumer.AvroBatchRequest
	7, // 5: ingestion_consumer.MasterService.RegisterFile:output_type -> ingestion_consumer.MasterFileResponse
	0, // 6: ingestion_consumer.MasterService.GetBatchDestination:output_type -> ingestion_consumer.MasterResponse
	3, // 7: ingestion_consumer.WorkerService.StoreBatchAvro:output_type -> ingestion_consumer.WorkerResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ingest_proto_init() }
func file_ingest_proto_init() {
	if File_ingest_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ingest_proto_rawDesc), len(file_ingest_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ingest_proto_goTypes,
		DependencyIndexes: file_ingest_proto_depIdxs,
		MessageInfos:      file_ingest_proto_msgTypes,
	}.Build()
	File_ingest_proto = out.File
	file_ingest_proto_goTypes = nil
	file_ingest_proto_depIdxs = nil
}
