---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: observability
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /tmp/positions.yaml

    clients:
      - url: http://loki:3100/loki/api/v1/push

    scrape_configs:
      # Scrape datalake service logs
      - job_name: datalake-services
        static_configs:
          - targets:
              - localhost
            labels:
              job: datalake-services
              __path__: /var/log/pods/datalake*/*/*.log

        # Parse JSON logs from your structured logging
        pipeline_stages:
          - json:
              expressions:
                timestamp: timestamp
                level: level
                message: message
                service: service
                version: version
                environment: environment
                trace_id: trace_id
                span_id: span_id
                user_id: user_id
                request_id: request_id
                method: method
                path: path
                status: status
                duration_ms: duration_ms
                error: error
                database: database
                operation: operation
                kafka_topic: kafka_topic
                project: project

          # Set timestamp from log
          - timestamp:
              source: timestamp
              format: RFC3339Nano

          # Add labels for filtering in Grafana
          - labels:
              level:
              service:
              environment:
              method:
              status:
              database:
              operation:
              kafka_topic:
              project:

          # Drop high-cardinality fields from labels
          - labeldrop:
              - trace_id
              - span_id
              - user_id
              - request_id
              - duration_ms
              - error
              - timestamp
              - message

      # Scrape all container logs
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          # Only scrape pods in datalake namespace
          - source_labels:
              - __meta_kubernetes_namespace
            regex: datalake
            action: keep

          # Add namespace label
          - source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace

          # Add pod name label
          - source_labels:
              - __meta_kubernetes_pod_name
            target_label: pod

          # Add container name label
          - source_labels:
              - __meta_kubernetes_pod_container_name
            target_label: container

          # Add service label from pod labels
          - source_labels:
              - __meta_kubernetes_pod_label_app
            target_label: service

          # Set log path
          - source_labels:
              - __meta_kubernetes_pod_uid
              - __meta_kubernetes_pod_container_name
            target_label: __path__
            separator: /
            replacement: /var/log/pods/*$1/*.log

        pipeline_stages:
          # Parse CRI format
          - cri: {}

          # Try to parse JSON logs
          - json:
              expressions:
                level: level
                service: service
                timestamp: timestamp
                message: message
                trace_id: trace_id
                request_id: request_id
                user_id: user_id
                method: method
                path: path
                status: status
                project: project
                operation: operation
              source: content

          # Set timestamp if available
          - timestamp:
              source: timestamp
              format: RFC3339Nano
              fallback_formats:
                - RFC3339
                - "2006-01-02T15:04:05.000Z07:00"

          # Add labels
          - labels:
              level:
              service:
              method:
              status:
              project:
              operation:

      # Scrape observability namespace logs
      - job_name: observability-pods
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              - __meta_kubernetes_namespace
            regex: observability
            action: keep
          - source_labels:
              - __meta_kubernetes_namespace
            target_label: namespace
          - source_labels:
              - __meta_kubernetes_pod_name
            target_label: pod
          - source_labels:
              - __meta_kubernetes_pod_container_name
            target_label: container
          - source_labels:
              - __meta_kubernetes_pod_label_app
            target_label: service
          - source_labels:
              - __meta_kubernetes_pod_uid
              - __meta_kubernetes_pod_container_name
            target_label: __path__
            separator: /
            replacement: /var/log/pods/*$1/*.log
        pipeline_stages:
          - cri: {}

    target_config:
      sync_period: 10s
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  namespace: observability
  labels:
    app: promtail
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: promtail
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      containers:
        - name: promtail
          image: grafana/promtail:2.9.3
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/promtail/promtail.yaml
            - -config.expand-env=true
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - name: http-metrics
              containerPort: 9080
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: http-metrics
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /ready
              port: http-metrics
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 200m
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: config
              mountPath: /etc/promtail
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: tmp
              mountPath: /tmp
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
      volumes:
        - name: config
          configMap:
            name: promtail-config
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: tmp
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: promtail
  namespace: observability
  labels:
    app: promtail
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 9080
      protocol: TCP
      targetPort: http-metrics
  selector:
    app: promtail