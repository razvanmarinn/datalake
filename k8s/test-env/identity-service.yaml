apiVersion: v1
kind: ConfigMap
metadata:
  name: identity-postgres-initdb
  namespace: __DYNAMIC_NAMESPACE__
data:
  init.sql: |
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";

    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        username VARCHAR(100) NOT NULL UNIQUE,
        email VARCHAR(255) NOT NULL UNIQUE,
        password TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS project (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(100) NOT NULL,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        owner_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE
    );
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: identity-service
  namespace: __DYNAMIC_NAMESPACE__
spec:
  replicas: 1
  selector:
    matchLabels:
      app: identity-service
  template:
    metadata:
      labels:
        app: identity-service
    spec:
      containers:
        - name: identity-service
          image: datalake/identity:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8082
            - containerPort: 50056
---
apiVersion: v1
kind: Service
metadata:
  name: identity-service
  namespace: __DYNAMIC_NAMESPACE__
spec:
  type: NodePort
  ports:
    - name: http
      port: 8082
      targetPort: 8082
      nodePort: 30082
    - name: grpc
      port: 50055
      targetPort: 50056
      nodePort: 30055
  selector:
    app: identity-service
---
apiVersion: v1
kind: Secret
metadata:
  name: identity-postgres-secret
  namespace: __DYNAMIC_NAMESPACE__
type: Opaque
data:
  postgres-password: aWRlbnRpdHlwYXNzd29yZA== # identitypassword
  postgres-user: aWRlbnRpdHl1c2Vy # identityuser
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: identity-postgres
  namespace: __DYNAMIC_NAMESPACE__
spec:
  replicas: 1
  selector:
    matchLabels:
      app: identity-postgres
  template:
    metadata:
      labels:
        app: identity-postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: identity-postgres-secret
                  key: postgres-password
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: identity-postgres-secret
                  key: postgres-user
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: identity-postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: initdb-scripts
              mountPath: /docker-entrypoint-initdb.d/
      volumes:
        - name: identity-postgres-storage
          emptyDir: {}
        - name: initdb-scripts
          configMap:
            name: identity-postgres-initdb
---
apiVersion: v1
kind: Service
metadata:
  name: identity-postgres
  namespace: __DYNAMIC_NAMESPACE__
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: identity-postgres
